There are two categories of changes I would make if I started from scratch again. The first is aesthetics and the second is my use of the factory pattern. 
	For aesthetics I would remove the fixed view of the game and follow the Chip sprite surrounds for about 5 x 5 tiles. I also would have added an interface with a digital display like in the actual Chip's Challenge game. I didn't do it this time because I did not want to overshoot for my goals on the program. I also would use multiple JavaFX threads so that the would not be in concurrency issues with getting the player's Chip and the Bugs to move at the same time. I also would have used the singleton pattern to incorporate some sort of sound effects box to make noices when Chip moves and collects items or moves to the next level.
	For the factory pattern I would remove my use of the factory pattern in the project. The only reason why I used it was to meet the three design pattern requirement. I do not think it is ineffective in my design but it does feel like over design for the creation of the different kinds of doors (red, blue, green, yellow). I could have just as easily used just the Strategy Pattern used to draw the keys and doors and avoided the extra DoorFactory class. 
	Overall my design follows the Model View Control architectural pattern. The control would be the Game Class. The model involves the following classes: GameGrid, LevelBuilder, BlueDoor, Bug, Chip, ComputerChip, Door, DoorFactory, GreenDoor, Key, PortalGate, RedDoor, Sprite, and YellowDoor. Some of these classes do have the image included in them. Some of the model classes do the drawing themselves onto the root, but they are abstracted away into methods in the class for the code to be more flexible (for exapmle if we wanted to use a different drawing library from JavaFX). The classes involved in the view are LevelDisplay, IImageSelector, DoorImageSelector, and KeyImageSelector. After I was done getting the game to work I found that the way the Doors' and the Keys' images were being selected were similar. I encapulated the functionality from the context classes by using the Strategy pattern. This follows the first principle of software engineering, and it made the code simpler to understand.

