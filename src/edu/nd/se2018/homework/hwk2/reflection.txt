	Our aim is to seperate and encapsulate the part of the design that will vary and in this assignment's case it is the behavior of the jockeys. JockeyBehavior is the interface and the concrete implementations are EarlySprintStrategy, SlowStartStrategy, and SteadyRunStrategy. The method each of these strategies implements is called stepOneMinute(). It takes a horse object as argument. This is done because the jockey strategy is based off of characteristics of the horse. Rather than passing in each argument needed (i.e. maxSpeed, milesRan) and having to change the function arguments whenever I make a change, I just pass a horse object and pull the variables I need from that object. For this homework2 besides the JockeyBehavior interface and the concrete strategies associated with it, we will need a Race class, a Horse class, and a Main class. The Main class does not have functionality. It uses the first sample race supplied on Sakai. A user should be able to start the program by running Main.java. The Race class adds horses to the race with the method enrollHorse(). enrollHorse() adds horses to the horseList so that the method runRace() can call update() on each horse to simulate the race. This is where the control loop for the race is. It is most suitable to have the control loop in the race class because the race must delare the winner and keep track of, compare, and print the distances of the horses. The data structure used to handle the horses is the ArrayList called horseList. When the update is called the algorithm for the Jockey strategy that that horse is using is what gets run. As the control loop iterates. The max horse is kept track of and if the max horse is past the 10 mile mark, the loop breaks and the winner is announced. The winnerMessage is returned for testing purposes. The Horse class has a contructor that sets jockeybehavior, name, index, maxSpeed, milesRan, and minutesRan. The setJockeyBehavior() method provides the ability to reset the strategy of each horse in a place other than the contructor. update() runs the jockeyBehavior method stepOneMinute() to update the minutes and the total miles traveled. The printMiles method simply prints the horse's name and the number of miles that has run.  
